
//! Autogenerated weights for `pallet_edge_connect`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-07-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `LAPTOP-9PG2UJNC`, CPU: `AMD Ryzen 5 PRO 5650U with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_edge_connect
// --extrinsic=*
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output=pallets/worker-clusters/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_edge_connect`.
pub struct SubstrateWeight<T>(PhantomData<T>);

pub trait WeightInfo {
	fn register_worker() -> Weight;
	fn remove_worker() -> Weight;
}

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `EdgeConnect::AccountWorkers` (r:1 w:1)
	/// Proof: `EdgeConnect::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:0 w:1)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	fn register_worker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3513`
		// Minimum execution time: 38_363_000 picoseconds.
		Weight::from_parts(43_072_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `EdgeConnect::WorkerClusters` (r:1 w:1)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	fn remove_worker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `206`
		//  Estimated: `3698`
		// Minimum execution time: 29_647_000 picoseconds.
		Weight::from_parts(34_325_000, 0)
			.saturating_add(Weight::from_parts(0, 3698))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
