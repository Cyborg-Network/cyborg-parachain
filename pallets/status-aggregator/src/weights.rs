
//! Autogenerated weights for `pallet_status_aggregator`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-09-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `SGOWMBP3`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet-status-aggregator
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/status-aggregator/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_status_aggregator`.
pub trait WeightInfo {
	fn derive_status_percentages_for_period() -> Weight;
	fn on_new_data() -> Weight;
}

/// Weights for `pallet_status_aggregator` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `StatusAggregator::WorkerStatusEntriesPerPeriod` (r:11 w:0)
	/// Proof: `StatusAggregator::WorkerStatusEntriesPerPeriod` (`max_values`: None, `max_size`: Some(1850), added: 4325, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::LastClearedBlock` (r:1 w:0)
	/// Proof: `StatusAggregator::LastClearedBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::ResultingWorkerStatusPercentages` (r:0 w:10)
	/// Proof: `StatusAggregator::ResultingWorkerStatusPercentages` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::ResultingWorkerStatus` (r:0 w:10)
	/// Proof: `StatusAggregator::ResultingWorkerStatus` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn derive_status_percentages_for_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1014`
		//  Estimated: `48565`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(62_000_000, 48565)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(20_u64))
	}
	/// Storage: `StatusAggregator::SubmittedPerPeriod` (r:10 w:10)
	/// Proof: `StatusAggregator::SubmittedPerPeriod` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::WorkerStatusEntriesPerPeriod` (r:10 w:10)
	/// Proof: `StatusAggregator::WorkerStatusEntriesPerPeriod` (`max_values`: None, `max_size`: Some(1850), added: 4325, mode: `MaxEncodedLen`)
	fn on_new_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `44240`
		// Minimum execution time: 105_000_000 picoseconds.
		Weight::from_parts(110_000_000, 44240)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(20_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `StatusAggregator::WorkerStatusEntriesPerPeriod` (r:11 w:0)
	/// Proof: `StatusAggregator::WorkerStatusEntriesPerPeriod` (`max_values`: None, `max_size`: Some(1850), added: 4325, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::LastClearedBlock` (r:1 w:0)
	/// Proof: `StatusAggregator::LastClearedBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::ResultingWorkerStatusPercentages` (r:0 w:10)
	/// Proof: `StatusAggregator::ResultingWorkerStatusPercentages` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::ResultingWorkerStatus` (r:0 w:10)
	/// Proof: `StatusAggregator::ResultingWorkerStatus` (`max_values`: None, `max_size`: Some(50), added: 2525, mode: `MaxEncodedLen`)
	fn derive_status_percentages_for_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1014`
		//  Estimated: `48565`
		// Minimum execution time: 60_000_000 picoseconds.
		Weight::from_parts(62_000_000, 48565)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(20_u64))
	}
	/// Storage: `StatusAggregator::SubmittedPerPeriod` (r:10 w:10)
	/// Proof: `StatusAggregator::SubmittedPerPeriod` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `StatusAggregator::WorkerStatusEntriesPerPeriod` (r:10 w:10)
	/// Proof: `StatusAggregator::WorkerStatusEntriesPerPeriod` (`max_values`: None, `max_size`: Some(1850), added: 4325, mode: `MaxEncodedLen`)
	fn on_new_data() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `44240`
		// Minimum execution time: 105_000_000 picoseconds.
		Weight::from_parts(110_000_000, 44240)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(20_u64))
	}
}
