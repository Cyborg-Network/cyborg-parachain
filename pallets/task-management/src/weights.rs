
//! Autogenerated weights for `pallet_task_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-08-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zcalz-MS-7B84`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_task_management
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/task-management/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_task_management`.
pub trait WeightInfo {
	fn task_scheduler(s: u32, ) -> Weight;
	fn submit_completed_task(s: u32, ) -> Weight;
	fn verify_completed_task(s: u32, ) -> Weight;
	fn resolve_completed_task(s: u32, ) -> Weight;
}

/// Weights for `pallet_task_management` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `WorkerClusters::AccountWorkers` (r:2 w:0)
	/// Proof: `WorkerClusters::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `WorkerClusters::WorkerClusters` (r:2 w:0)
	/// Proof: `WorkerClusters::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `6406`
		// Minimum execution time: 32_320_000 picoseconds.
		Weight::from_parts(34_671_899, 6406)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `WorkerClusters::WorkerClusters` (r:3 w:0)
	/// Proof: `WorkerClusters::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587`
		//  Estimated: `9114`
		// Minimum execution time: 36_370_000 picoseconds.
		Weight::from_parts(37_254_088, 9114)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn verify_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 17_460_000 picoseconds.
		Weight::from_parts(18_030_563, 3686)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn resolve_completed_task(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 17_670_000 picoseconds.
		Weight::from_parts(18_250_865, 3686)
			// Standard Error: 218
			.saturating_add(Weight::from_parts(428, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `WorkerClusters::AccountWorkers` (r:2 w:0)
	/// Proof: `WorkerClusters::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `WorkerClusters::WorkerClusters` (r:2 w:0)
	/// Proof: `WorkerClusters::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `271`
		//  Estimated: `6406`
		// Minimum execution time: 32_320_000 picoseconds.
		Weight::from_parts(34_671_899, 6406)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `WorkerClusters::WorkerClusters` (r:3 w:0)
	/// Proof: `WorkerClusters::WorkerClusters` (`max_values`: None, `max_size`: Some(233), added: 2708, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `587`
		//  Estimated: `9114`
		// Minimum execution time: 36_370_000 picoseconds.
		Weight::from_parts(37_254_088, 9114)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn verify_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 17_460_000 picoseconds.
		Weight::from_parts(18_030_563, 3686)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn resolve_completed_task(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 17_670_000 picoseconds.
		Weight::from_parts(18_250_865, 3686)
			// Standard Error: 218
			.saturating_add(Weight::from_parts(428, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
