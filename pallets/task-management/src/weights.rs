
//! Autogenerated weights for `pallet_task_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `SGOWMBP3`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet-task-management
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/task-management/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_task_management`.
pub trait WeightInfo {
	fn task_scheduler(s: u32, ) -> Weight;
	fn submit_completed_task(s: u32, ) -> Weight;
	fn verify_completed_task(s: u32, ) -> Weight;
	fn resolve_completed_task(s: u32, ) -> Weight;
	fn confirm_task_reception() -> Weight;
	fn stop_task_and_vacate_miner() -> Weight;
	fn confirm_miner_vacation() -> Weight;
	fn set_gatekeeper() -> Weight;
	fn register_model_hash()-> Weight;
	fn get_model_hash()->Weight;

}

/// Weights for `pallet_task_management` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `EdgeConnect::AccountWorkers` (r:2 w:0)
	/// Proof: `EdgeConnect::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:2 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(223), added: 2698, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `6386`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(22_654_374, 6386)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:3 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(223), added: 2698, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `616`
		//  Estimated: `9084`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_382_093, 9084)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn verify_completed_task(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_153_446, 3686)
			// Standard Error: 702
			.saturating_add(Weight::from_parts(3_686, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn resolve_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_444_111, 3686)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}

	fn confirm_task_reception() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3647)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    /// Storage: `TaskManagement::Tasks` (r:1 w:1)
    /// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
    /// Storage: `TaskManagement::ComputeAggregations` (r:1 w:1)
    /// Proof: `TaskManagement::ComputeAggregations` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    fn stop_task_and_vacate_miner() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(21_000_000, 3647)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }

    /// Storage: `TaskManagement::Tasks` (r:1 w:1)
    /// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
    fn confirm_miner_vacation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 15_000_000 picoseconds.
        Weight::from_parts(16_000_000, 3647)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

	/// Storage: `TaskManagement::GatekeeperAccount` (r:0 w:1)
    /// Proof: `TaskManagement::GatekeeperAccount` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    fn set_gatekeeper() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(10_000_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

	/// Storage: `TaskManagement::GatekeeperAccount` (r:1 w:0)
	/// Proof: `TaskManagement::GatekeeperAccount` (`max_values`: Some(1), `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::ModelHashes` (r:1 w:1)
	/// Proof: `TaskManagement::ModelHashes` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn register_model_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `178`
		//  Estimated: `5046`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_100_000, 5046)
			.saturating_add(T::DbWeight::get().reads(2_u64))  // Gatekeeper + ModelHashes
			.saturating_add(T::DbWeight::get().writes(1_u64)) // ModelHashes insert
	}

	/// Storage: `TaskManagement::ModelHashes` (r:1 w:0)
	/// Proof: `TaskManagement::ModelHashes` (`max_values`: None, `max_size`: Some(96), added: 2592, mode: `MaxEncodedLen`)
	fn get_model_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `2592`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_500_000, 2592)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}


}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `EdgeConnect::AccountWorkers` (r:2 w:0)
	/// Proof: `EdgeConnect::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:2 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(223), added: 2698, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `6386`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(22_654_374, 6386)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:3 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(223), added: 2698, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `616`
		//  Estimated: `9084`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_382_093, 9084)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn verify_completed_task(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_153_446, 3686)
			// Standard Error: 702
			.saturating_add(Weight::from_parts(3_686, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn resolve_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_444_111, 3686)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn confirm_task_reception() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_000_000, 3647)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }

    /// Storage: `TaskManagement::Tasks` (r:1 w:1)
    /// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
    /// Storage: `TaskManagement::ComputeAggregations` (r:1 w:1)
    /// Proof: `TaskManagement::ComputeAggregations` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    fn stop_task_and_vacate_miner() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(21_000_000, 3647)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }

    /// Storage: `TaskManagement::Tasks` (r:1 w:1)
    /// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
    fn confirm_miner_vacation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361`
        //  Estimated: `3647`
        // Minimum execution time: 15_000_000 picoseconds.
        Weight::from_parts(16_000_000, 3647)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

	fn set_gatekeeper() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(10_000_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

	/// Storage: `TaskManagement::Tasks` (r:1 w:0)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::ModelHashes` (r:0 w:1)
	/// Proof: `TaskManagement::ModelHashes` (`max_values`: None, `max_size`: Some(64), added: 2560, mode: `MaxEncodedLen`)
	fn register_model_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `300`
		//  Estimated: `5217`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_500_000, 5217)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Storage: `TaskManagement::ModelHashes` (r:1 w:0)
	/// Proof: `TaskManagement::ModelHashes` (`max_values`: None, `max_size`: Some(64), added: 2560, mode: `MaxEncodedLen`)
	fn get_model_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `2560`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_500_000, 2560)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}


}
