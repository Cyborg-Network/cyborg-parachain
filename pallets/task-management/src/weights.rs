
//! Autogenerated weights for `pallet_task_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-11-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Calvins-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet-task-management
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/task-management/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_task_management`.
pub trait WeightInfo {
	fn task_scheduler(s: u32, ) -> Weight;
	fn submit_completed_task(s: u32, ) -> Weight;
	fn verify_completed_task(s: u32, ) -> Weight;
	fn resolve_completed_task(s: u32, ) -> Weight;
}

/// Weights for `pallet_task_management` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `EdgeConnect::AccountWorkers` (r:2 w:0)
	/// Proof: `EdgeConnect::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:1 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(262), added: 2737, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(685), added: 3160, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1860`
		//  Estimated: `6036`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 6036)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:3 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(262), added: 2737, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:1 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(685), added: 3160, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `751`
		//  Estimated: `9201`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 9201)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn verify_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3686)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn resolve_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3686)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `EdgeConnect::AccountWorkers` (r:2 w:0)
	/// Proof: `EdgeConnect::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::NextTaskId` (r:1 w:1)
	/// Proof: `TaskManagement::NextTaskId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:1 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(262), added: 2737, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:0 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskAllocations` (r:0 w:1)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:0 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(685), added: 3160, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskOwners` (r:0 w:1)
	/// Proof: `TaskManagement::TaskOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn task_scheduler(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1860`
		//  Estimated: `6036`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 6036)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `TaskManagement::TaskAllocations` (r:1 w:0)
	/// Proof: `TaskManagement::TaskAllocations` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `EdgeConnect::WorkerClusters` (r:3 w:0)
	/// Proof: `EdgeConnect::WorkerClusters` (`max_values`: None, `max_size`: Some(262), added: 2737, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::Tasks` (r:1 w:1)
	/// Proof: `TaskManagement::Tasks` (`max_values`: None, `max_size`: Some(685), added: 3160, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:0 w:1)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn submit_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `751`
		//  Estimated: `9201`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 9201)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn verify_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3686`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3686)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `TaskManagement::TaskStatus` (r:1 w:1)
	/// Proof: `TaskManagement::TaskStatus` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `TaskManagement::TaskVerifications` (r:1 w:0)
	/// Proof: `TaskManagement::TaskVerifications` (`max_values`: None, `max_size`: Some(221), added: 2696, mode: `MaxEncodedLen`)
	fn resolve_completed_task(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3686`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_000_000, 3686)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
