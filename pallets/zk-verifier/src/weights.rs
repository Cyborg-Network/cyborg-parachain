
//! Autogenerated weights for `pallet_zk_verifier`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-10-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Calvins-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain=dev
// --pallet=pallet-zk-verifier
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/zk-verifier/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_zk_verifier`.
pub trait WeightInfo {
	fn setup_verification_benchmark() -> Weight;
	fn verify_benchmark() -> Weight;
}

/// Weights for `pallet_zk_verifier` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ZKVerifier::PublicInputStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::PublicInputStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::VerificationKeyStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::VerificationKeyStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn setup_verification_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 99_000_000 picoseconds.
		Weight::from_parts(99_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ZKVerifier::VerificationKeyStorage` (r:1 w:0)
	/// Proof: `ZKVerifier::VerificationKeyStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::PublicInputStorage` (r:1 w:0)
	/// Proof: `ZKVerifier::PublicInputStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::ProofStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::ProofStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn verify_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4142`
		//  Estimated: `5627`
		// Minimum execution time: 30_024_000_000 picoseconds.
		Weight::from_parts(30_070_000_000, 5627)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ZKVerifier::PublicInputStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::PublicInputStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::VerificationKeyStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::VerificationKeyStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn setup_verification_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 99_000_000 picoseconds.
		Weight::from_parts(99_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ZKVerifier::VerificationKeyStorage` (r:1 w:0)
	/// Proof: `ZKVerifier::VerificationKeyStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::PublicInputStorage` (r:1 w:0)
	/// Proof: `ZKVerifier::PublicInputStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ZKVerifier::ProofStorage` (r:0 w:1)
	/// Proof: `ZKVerifier::ProofStorage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn verify_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4142`
		//  Estimated: `5627`
		// Minimum execution time: 30_024_000_000 picoseconds.
		Weight::from_parts(30_070_000_000, 5627)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
