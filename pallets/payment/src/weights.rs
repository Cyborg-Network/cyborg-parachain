
//! Autogenerated weights for `pallet_payment`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-10-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `SGOWMBP3`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --runtime=./target/release/wbuild/cyborg-runtime/cyborg_runtime.wasm
// --genesis-builder=runtime
// --pallet=pallet-payment
// --extrinsic=*
// --steps=50
// --repeat=20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/payment/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_payment`.
pub trait WeightInfo {
	fn set_price_per_hour() -> Weight;
	fn set_service_provider_account() -> Weight;
	fn purchase_compute_hours() -> Weight;
	fn consume_compute_hours() -> Weight;
}

/// Weights for `pallet_payment` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Payment::PricePerHour` (r:0 w:1)
	/// Proof: `Payment::PricePerHour` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_price_per_hour() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_515_000_000 picoseconds.
		Weight::from_parts(1_603_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Payment::ServiceProviderAccount` (r:0 w:1)
	/// Proof: `Payment::ServiceProviderAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_service_provider_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_749_000_000 picoseconds.
		Weight::from_parts(1_817_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Payment::PricePerHour` (r:1 w:0)
	/// Proof: `Payment::PricePerHour` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Payment::ServiceProviderAccount` (r:1 w:0)
	/// Proof: `Payment::ServiceProviderAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Payment::ComputeHours` (r:1 w:1)
	/// Proof: `Payment::ComputeHours` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn purchase_compute_hours() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `6196`
		// Minimum execution time: 15_145_000_000 picoseconds.
		Weight::from_parts(15_382_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Payment::ComputeHours` (r:1 w:1)
	/// Proof: `Payment::ComputeHours` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn consume_compute_hours() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `3517`
		// Minimum execution time: 2_637_000_000 picoseconds.
		Weight::from_parts(2_728_000_000, 3517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Payment::PricePerHour` (r:0 w:1)
	/// Proof: `Payment::PricePerHour` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_price_per_hour() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_515_000_000 picoseconds.
		Weight::from_parts(1_603_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Payment::ServiceProviderAccount` (r:0 w:1)
	/// Proof: `Payment::ServiceProviderAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_service_provider_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_749_000_000 picoseconds.
		Weight::from_parts(1_817_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Payment::PricePerHour` (r:1 w:0)
	/// Proof: `Payment::PricePerHour` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Payment::ServiceProviderAccount` (r:1 w:0)
	/// Proof: `Payment::ServiceProviderAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Payment::ComputeHours` (r:1 w:1)
	/// Proof: `Payment::ComputeHours` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn purchase_compute_hours() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `6196`
		// Minimum execution time: 15_145_000_000 picoseconds.
		Weight::from_parts(15_382_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Payment::ComputeHours` (r:1 w:1)
	/// Proof: `Payment::ComputeHours` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn consume_compute_hours() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `3517`
		// Minimum execution time: 2_637_000_000 picoseconds.
		Weight::from_parts(2_728_000_000, 3517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
