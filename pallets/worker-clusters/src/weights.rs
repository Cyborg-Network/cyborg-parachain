
//! Autogenerated weights for `pallet_worker_clusters`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-07-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zcalz-MS-7B84`, CPU: `AMD Ryzen 5 3600 6-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/cyborg-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_worker_clusters
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --wasm-execution=compiled
// --output
// pallets/worker-clusters/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_worker_clusters`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_worker_clusters::WeightInfo for WeightInfo<T> {
	/// Storage: `WorkerClusters::AccountWorkers` (r:1 w:1)
	/// Proof: `WorkerClusters::AccountWorkers` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `WorkerClusters::WorkerClusters` (r:0 w:1)
	/// Proof: `WorkerClusters::WorkerClusters` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn register_worker() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3513`
		// Minimum execution time: 16_571_000 picoseconds.
		Weight::from_parts(16_910_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
